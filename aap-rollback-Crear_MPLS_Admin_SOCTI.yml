---
- name: rollback de configuracion CREAR_MPLS_ESC
  hosts: all
  gather_facts: no
  
  vars:
    vrf_name: ""
    site: ""
    equipos_config:
      AMU-P5-E4-UR29-BLEAF-A:
        bgp_asn: "65021"
        id_po: "Port-Channel5."
      AMU-P5-E3-UR29-BLEAF-B:
        bgp_asn: "65021"
        id_po: "Port-Channel6."
      CDLV-212-G31-UR29-BLEAF-A:
        bgp_asn: "65121"
        id_po: "Port-Channel5."
      CDLV-212-G32-UR29-BLEAF-B:
        bgp_asn: "65121"
        id_po: "Port-Channel6."
  
  tasks:
    - name: Verificar existencia de la VRF
      arista.eos.eos_command:
        commands:
          - show vrf | include {{ vrf_name }}
      register: vrf_check

    - name: Debug VRF check
      debug:
        var: vrf_check.stdout

    - name: Ejecutar el comando para obtener la información de la VRF
      arista.eos.eos_command:
        commands:
        - show ip route vrf {{ vrf_name }} connected
      register: vrf_output

    - name: Extraer la VLAN ID
      set_fact:
       vlan_id: "{{ (vrf_output.stdout[0] | regex_search('Vlan(\\d+)', '\\1')) | first }}"

    - name: Extraer el Port-Channel
      set_fact:
       port_channel: "{{ (vrf_output.stdout[0] | regex_search('Port-Channel\\d+\\.?(\\d+)?', '\\1')) | first }}"

    - name: Mostrar los valores extraídos
      debug:
        msg: 
           - "VLAN ID: {{ vlan_id }}"
           - "Port-Channel: {{ port_channel }}"

    - name: Verificar existencia de VRRP
      arista.eos.eos_command:
        commands:
          - show vrrp group 120 interface vlan {{ vlan_id }}
      register: vrrp_check

    - name: Debug VRRP check
      debug:
        var: vrrp_check.stdout

   
    - name: Obtener la configuración completa de las rutas estáticas
      arista.eos.eos_command:
        commands: "show run | i ip route vrf {{ vrf_name }}"
      register: static_routes_output

    - name: Verificar la salida completa de las rutas estáticas
      debug:
        msg: "{{ static_routes_output.stdout_lines }}"

    - name: Filtrar rutas estáticas para el VRF especificado
      set_fact:
        filtered_static_routes: "{{ static_routes_output.stdout_lines | select('search', 'ip route vrf {{ vrf_name }}') | list }}"

    - name: Separar rutas estáticas en variables
      set_fact:
        static_route_1: "{{ filtered_static_routes[0] | default('') }}"
        static_route_2: "{{ filtered_static_routes[1] | default('') }}"
        static_route_3: "{{ filtered_static_routes[2] | default('') }}"
        static_route_4: "{{ filtered_static_routes[3] | default('') }}"
        static_route_5: "{{ filtered_static_routes[4] | default('') }}"
        static_route_6: "{{ filtered_static_routes[5] | default('') }}"
        static_route_7: "{{ filtered_static_routes[6] | default('') }}"
        static_route_8: "{{ filtered_static_routes[7] | default('') }}"
        static_route_9: "{{ filtered_static_routes[8] | default('') }}"
        static_route_10: "{{ filtered_static_routes[9] | default('') }}"
      
    - name: Mostrar rutas estáticas obtenidas
      debug:
        msg:
          - "Ruta estática 1: {{ static_route_1 }}"
          - "Ruta estática 2: {{ static_route_2 }}"
          - "Ruta estática 3: {{ static_route_3 }}"
          - "Ruta estática 4: {{ static_route_4 }}"
          - "Ruta estática 5: {{ static_route_5 }}"
          - "Ruta estática 6: {{ static_route_6 }}"
          - "Ruta estática 7: {{ static_route_7 }}"
          - "Ruta estática 8: {{ static_route_8 }}"
          - "Ruta estática 9: {{ static_route_9 }}"
          - "Ruta estática 10: {{ static_route_10 }}"
          

    - name: Debug rutas estáticas separadas
      debug:
        msg:
        - "Ruta 1: {{ static_route_1 }}"
        - "Ruta 2: {{ static_route_2 }}"
        - "Ruta 3: {{ static_route_3 }}"
        - "Ruta 4: {{ static_route_4 }}"
        - "Ruta 5: {{ static_route_5 }}"
        - "Ruta 6: {{ static_route_6 }}"
        - "Ruta 7: {{ static_route_7 }}"
        - "Ruta 8: {{ static_route_8 }}"
        - "Ruta 9: {{ static_route_9 }}"
        - "Ruta 10: {{ static_route_10 }}"


